// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package linear

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/sayedmurtaza24/tinear/linear/models"
)

type LinearClient interface {
	GetIssues(ctx context.Context, filter *models.IssueFilter, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetIssues, error)
	SearchIssues(ctx context.Context, term string, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*SearchIssues, error)
	UpdateIssue(ctx context.Context, input models.IssueUpdateInput, issueUpdateID string, interceptors ...clientv2.RequestInterceptor) (*UpdateIssue, error)
	UnassignIssue(ctx context.Context, issueUpdateID string, interceptors ...clientv2.RequestInterceptor) (*UnassignIssue, error)
	GetProjects(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetProjects, error)
	GetCurrentUser(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetCurrentUser, error)
	GetAllUsers(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) LinearClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type GetIssues_Issues_Nodes_Team struct {
	Name  string  "json:\"name\" graphql:\"name\""
	Color *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *GetIssues_Issues_Nodes_Team) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Team{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_Team) GetColor() *string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Team{}
	}
	return t.Color
}

type GetIssues_Issues_Nodes_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	IsMe        bool   "json:\"isMe\" graphql:\"isMe\""
}

func (t *GetIssues_Issues_Nodes_Assignee) GetDisplayName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Assignee{}
	}
	return t.DisplayName
}
func (t *GetIssues_Issues_Nodes_Assignee) GetIsMe() bool {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Assignee{}
	}
	return t.IsMe
}

type GetIssues_Issues_Nodes_Project struct {
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *GetIssues_Issues_Nodes_Project) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Project{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_Project) GetColor() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Project{}
	}
	return t.Color
}

type GetIssues_Issues_Nodes_State struct {
	Name     string  "json:\"name\" graphql:\"name\""
	Color    string  "json:\"color\" graphql:\"color\""
	Position float64 "json:\"position\" graphql:\"position\""
}

func (t *GetIssues_Issues_Nodes_State) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_State) GetColor() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State{}
	}
	return t.Color
}
func (t *GetIssues_Issues_Nodes_State) GetPosition() float64 {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State{}
	}
	return t.Position
}

type GetIssues_Issues_Nodes_Labels_Nodes struct {
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *GetIssues_Issues_Nodes_Labels_Nodes) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels_Nodes{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_Labels_Nodes) GetColor() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels_Nodes{}
	}
	return t.Color
}

type GetIssues_Issues_Nodes_Labels struct {
	Nodes []*GetIssues_Issues_Nodes_Labels_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *GetIssues_Issues_Nodes_Labels) GetNodes() []*GetIssues_Issues_Nodes_Labels_Nodes {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels{}
	}
	return t.Nodes
}

type GetIssues_Issues_Nodes struct {
	ID         string                           "json:\"id\" graphql:\"id\""
	Identifier string                           "json:\"identifier\" graphql:\"identifier\""
	Title      string                           "json:\"title\" graphql:\"title\""
	Priority   float64                          "json:\"priority\" graphql:\"priority\""
	Team       GetIssues_Issues_Nodes_Team      "json:\"team\" graphql:\"team\""
	Assignee   *GetIssues_Issues_Nodes_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Project    *GetIssues_Issues_Nodes_Project  "json:\"project,omitempty\" graphql:\"project\""
	State      GetIssues_Issues_Nodes_State     "json:\"state\" graphql:\"state\""
	Labels     GetIssues_Issues_Nodes_Labels    "json:\"labels\" graphql:\"labels\""
}

func (t *GetIssues_Issues_Nodes) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.ID
}
func (t *GetIssues_Issues_Nodes) GetIdentifier() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Identifier
}
func (t *GetIssues_Issues_Nodes) GetTitle() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Title
}
func (t *GetIssues_Issues_Nodes) GetPriority() float64 {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Priority
}
func (t *GetIssues_Issues_Nodes) GetTeam() *GetIssues_Issues_Nodes_Team {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return &t.Team
}
func (t *GetIssues_Issues_Nodes) GetAssignee() *GetIssues_Issues_Nodes_Assignee {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Assignee
}
func (t *GetIssues_Issues_Nodes) GetProject() *GetIssues_Issues_Nodes_Project {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Project
}
func (t *GetIssues_Issues_Nodes) GetState() *GetIssues_Issues_Nodes_State {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return &t.State
}
func (t *GetIssues_Issues_Nodes) GetLabels() *GetIssues_Issues_Nodes_Labels {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return &t.Labels
}

type GetIssues_Issues_PageInfo struct {
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
}

func (t *GetIssues_Issues_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetIssues_Issues_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetIssues_Issues_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetIssues_Issues_PageInfo{}
	}
	return t.EndCursor
}

type GetIssues_Issues struct {
	Nodes    []*GetIssues_Issues_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetIssues_Issues_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetIssues_Issues) GetNodes() []*GetIssues_Issues_Nodes {
	if t == nil {
		t = &GetIssues_Issues{}
	}
	return t.Nodes
}
func (t *GetIssues_Issues) GetPageInfo() *GetIssues_Issues_PageInfo {
	if t == nil {
		t = &GetIssues_Issues{}
	}
	return &t.PageInfo
}

type SearchIssues_SearchIssues_PageInfo struct {
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
}

func (t *SearchIssues_SearchIssues_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &SearchIssues_SearchIssues_PageInfo{}
	}
	return t.HasNextPage
}
func (t *SearchIssues_SearchIssues_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &SearchIssues_SearchIssues_PageInfo{}
	}
	return t.EndCursor
}

type SearchIssues_SearchIssues_Nodes_Team struct {
	Name  string  "json:\"name\" graphql:\"name\""
	Color *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *SearchIssues_SearchIssues_Nodes_Team) GetName() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Team{}
	}
	return t.Name
}
func (t *SearchIssues_SearchIssues_Nodes_Team) GetColor() *string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Team{}
	}
	return t.Color
}

type SearchIssues_SearchIssues_Nodes_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	IsMe        bool   "json:\"isMe\" graphql:\"isMe\""
}

func (t *SearchIssues_SearchIssues_Nodes_Assignee) GetDisplayName() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Assignee{}
	}
	return t.DisplayName
}
func (t *SearchIssues_SearchIssues_Nodes_Assignee) GetIsMe() bool {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Assignee{}
	}
	return t.IsMe
}

type SearchIssues_SearchIssues_Nodes_Project struct {
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *SearchIssues_SearchIssues_Nodes_Project) GetName() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Project{}
	}
	return t.Name
}
func (t *SearchIssues_SearchIssues_Nodes_Project) GetColor() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Project{}
	}
	return t.Color
}

type SearchIssues_SearchIssues_Nodes_State struct {
	Name     string  "json:\"name\" graphql:\"name\""
	Color    string  "json:\"color\" graphql:\"color\""
	Position float64 "json:\"position\" graphql:\"position\""
}

func (t *SearchIssues_SearchIssues_Nodes_State) GetName() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_State{}
	}
	return t.Name
}
func (t *SearchIssues_SearchIssues_Nodes_State) GetColor() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_State{}
	}
	return t.Color
}
func (t *SearchIssues_SearchIssues_Nodes_State) GetPosition() float64 {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_State{}
	}
	return t.Position
}

type SearchIssues_SearchIssues_Nodes_Labels_Nodes struct {
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *SearchIssues_SearchIssues_Nodes_Labels_Nodes) GetName() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Labels_Nodes{}
	}
	return t.Name
}
func (t *SearchIssues_SearchIssues_Nodes_Labels_Nodes) GetColor() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Labels_Nodes{}
	}
	return t.Color
}

type SearchIssues_SearchIssues_Nodes_Labels struct {
	Nodes []*SearchIssues_SearchIssues_Nodes_Labels_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *SearchIssues_SearchIssues_Nodes_Labels) GetNodes() []*SearchIssues_SearchIssues_Nodes_Labels_Nodes {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes_Labels{}
	}
	return t.Nodes
}

type SearchIssues_SearchIssues_Nodes struct {
	ID         string                                    "json:\"id\" graphql:\"id\""
	Identifier string                                    "json:\"identifier\" graphql:\"identifier\""
	Title      string                                    "json:\"title\" graphql:\"title\""
	Priority   float64                                   "json:\"priority\" graphql:\"priority\""
	Team       SearchIssues_SearchIssues_Nodes_Team      "json:\"team\" graphql:\"team\""
	Assignee   *SearchIssues_SearchIssues_Nodes_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Project    *SearchIssues_SearchIssues_Nodes_Project  "json:\"project,omitempty\" graphql:\"project\""
	State      SearchIssues_SearchIssues_Nodes_State     "json:\"state\" graphql:\"state\""
	Labels     SearchIssues_SearchIssues_Nodes_Labels    "json:\"labels\" graphql:\"labels\""
}

func (t *SearchIssues_SearchIssues_Nodes) GetID() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return t.ID
}
func (t *SearchIssues_SearchIssues_Nodes) GetIdentifier() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return t.Identifier
}
func (t *SearchIssues_SearchIssues_Nodes) GetTitle() string {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return t.Title
}
func (t *SearchIssues_SearchIssues_Nodes) GetPriority() float64 {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return t.Priority
}
func (t *SearchIssues_SearchIssues_Nodes) GetTeam() *SearchIssues_SearchIssues_Nodes_Team {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return &t.Team
}
func (t *SearchIssues_SearchIssues_Nodes) GetAssignee() *SearchIssues_SearchIssues_Nodes_Assignee {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return t.Assignee
}
func (t *SearchIssues_SearchIssues_Nodes) GetProject() *SearchIssues_SearchIssues_Nodes_Project {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return t.Project
}
func (t *SearchIssues_SearchIssues_Nodes) GetState() *SearchIssues_SearchIssues_Nodes_State {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return &t.State
}
func (t *SearchIssues_SearchIssues_Nodes) GetLabels() *SearchIssues_SearchIssues_Nodes_Labels {
	if t == nil {
		t = &SearchIssues_SearchIssues_Nodes{}
	}
	return &t.Labels
}

type SearchIssues_SearchIssues struct {
	TotalCount float64                            "json:\"totalCount\" graphql:\"totalCount\""
	PageInfo   SearchIssues_SearchIssues_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	Nodes      []*SearchIssues_SearchIssues_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *SearchIssues_SearchIssues) GetTotalCount() float64 {
	if t == nil {
		t = &SearchIssues_SearchIssues{}
	}
	return t.TotalCount
}
func (t *SearchIssues_SearchIssues) GetPageInfo() *SearchIssues_SearchIssues_PageInfo {
	if t == nil {
		t = &SearchIssues_SearchIssues{}
	}
	return &t.PageInfo
}
func (t *SearchIssues_SearchIssues) GetNodes() []*SearchIssues_SearchIssues_Nodes {
	if t == nil {
		t = &SearchIssues_SearchIssues{}
	}
	return t.Nodes
}

type UpdateIssue_IssueUpdate_Issue_Team struct {
	Name  string  "json:\"name\" graphql:\"name\""
	Color *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *UpdateIssue_IssueUpdate_Issue_Team) GetName() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Team{}
	}
	return t.Name
}
func (t *UpdateIssue_IssueUpdate_Issue_Team) GetColor() *string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Team{}
	}
	return t.Color
}

type UpdateIssue_IssueUpdate_Issue_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	IsMe        bool   "json:\"isMe\" graphql:\"isMe\""
}

func (t *UpdateIssue_IssueUpdate_Issue_Assignee) GetDisplayName() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Assignee{}
	}
	return t.DisplayName
}
func (t *UpdateIssue_IssueUpdate_Issue_Assignee) GetIsMe() bool {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Assignee{}
	}
	return t.IsMe
}

type UpdateIssue_IssueUpdate_Issue_Project struct {
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *UpdateIssue_IssueUpdate_Issue_Project) GetName() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Project{}
	}
	return t.Name
}
func (t *UpdateIssue_IssueUpdate_Issue_Project) GetColor() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Project{}
	}
	return t.Color
}

type UpdateIssue_IssueUpdate_Issue_State struct {
	Name     string  "json:\"name\" graphql:\"name\""
	Color    string  "json:\"color\" graphql:\"color\""
	Position float64 "json:\"position\" graphql:\"position\""
}

func (t *UpdateIssue_IssueUpdate_Issue_State) GetName() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_State{}
	}
	return t.Name
}
func (t *UpdateIssue_IssueUpdate_Issue_State) GetColor() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_State{}
	}
	return t.Color
}
func (t *UpdateIssue_IssueUpdate_Issue_State) GetPosition() float64 {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_State{}
	}
	return t.Position
}

type UpdateIssue_IssueUpdate_Issue_Labels_Nodes struct {
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *UpdateIssue_IssueUpdate_Issue_Labels_Nodes) GetName() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Labels_Nodes{}
	}
	return t.Name
}
func (t *UpdateIssue_IssueUpdate_Issue_Labels_Nodes) GetColor() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Labels_Nodes{}
	}
	return t.Color
}

type UpdateIssue_IssueUpdate_Issue_Labels struct {
	Nodes []*UpdateIssue_IssueUpdate_Issue_Labels_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *UpdateIssue_IssueUpdate_Issue_Labels) GetNodes() []*UpdateIssue_IssueUpdate_Issue_Labels_Nodes {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue_Labels{}
	}
	return t.Nodes
}

type UpdateIssue_IssueUpdate_Issue struct {
	ID         string                                  "json:\"id\" graphql:\"id\""
	Identifier string                                  "json:\"identifier\" graphql:\"identifier\""
	Title      string                                  "json:\"title\" graphql:\"title\""
	Priority   float64                                 "json:\"priority\" graphql:\"priority\""
	Team       UpdateIssue_IssueUpdate_Issue_Team      "json:\"team\" graphql:\"team\""
	Assignee   *UpdateIssue_IssueUpdate_Issue_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Project    *UpdateIssue_IssueUpdate_Issue_Project  "json:\"project,omitempty\" graphql:\"project\""
	State      UpdateIssue_IssueUpdate_Issue_State     "json:\"state\" graphql:\"state\""
	Labels     UpdateIssue_IssueUpdate_Issue_Labels    "json:\"labels\" graphql:\"labels\""
}

func (t *UpdateIssue_IssueUpdate_Issue) GetID() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return t.ID
}
func (t *UpdateIssue_IssueUpdate_Issue) GetIdentifier() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return t.Identifier
}
func (t *UpdateIssue_IssueUpdate_Issue) GetTitle() string {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return t.Title
}
func (t *UpdateIssue_IssueUpdate_Issue) GetPriority() float64 {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return t.Priority
}
func (t *UpdateIssue_IssueUpdate_Issue) GetTeam() *UpdateIssue_IssueUpdate_Issue_Team {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return &t.Team
}
func (t *UpdateIssue_IssueUpdate_Issue) GetAssignee() *UpdateIssue_IssueUpdate_Issue_Assignee {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return t.Assignee
}
func (t *UpdateIssue_IssueUpdate_Issue) GetProject() *UpdateIssue_IssueUpdate_Issue_Project {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return t.Project
}
func (t *UpdateIssue_IssueUpdate_Issue) GetState() *UpdateIssue_IssueUpdate_Issue_State {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return &t.State
}
func (t *UpdateIssue_IssueUpdate_Issue) GetLabels() *UpdateIssue_IssueUpdate_Issue_Labels {
	if t == nil {
		t = &UpdateIssue_IssueUpdate_Issue{}
	}
	return &t.Labels
}

type UpdateIssue_IssueUpdate struct {
	Success bool                           "json:\"success\" graphql:\"success\""
	Issue   *UpdateIssue_IssueUpdate_Issue "json:\"issue,omitempty\" graphql:\"issue\""
}

func (t *UpdateIssue_IssueUpdate) GetSuccess() bool {
	if t == nil {
		t = &UpdateIssue_IssueUpdate{}
	}
	return t.Success
}
func (t *UpdateIssue_IssueUpdate) GetIssue() *UpdateIssue_IssueUpdate_Issue {
	if t == nil {
		t = &UpdateIssue_IssueUpdate{}
	}
	return t.Issue
}

type UnassignIssue_IssueUpdate_Issue_Team struct {
	Name  string  "json:\"name\" graphql:\"name\""
	Color *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *UnassignIssue_IssueUpdate_Issue_Team) GetName() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Team{}
	}
	return t.Name
}
func (t *UnassignIssue_IssueUpdate_Issue_Team) GetColor() *string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Team{}
	}
	return t.Color
}

type UnassignIssue_IssueUpdate_Issue_Assignee struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	IsMe        bool   "json:\"isMe\" graphql:\"isMe\""
}

func (t *UnassignIssue_IssueUpdate_Issue_Assignee) GetDisplayName() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Assignee{}
	}
	return t.DisplayName
}
func (t *UnassignIssue_IssueUpdate_Issue_Assignee) GetIsMe() bool {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Assignee{}
	}
	return t.IsMe
}

type UnassignIssue_IssueUpdate_Issue_Project struct {
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *UnassignIssue_IssueUpdate_Issue_Project) GetName() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Project{}
	}
	return t.Name
}
func (t *UnassignIssue_IssueUpdate_Issue_Project) GetColor() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Project{}
	}
	return t.Color
}

type UnassignIssue_IssueUpdate_Issue_State struct {
	Name     string  "json:\"name\" graphql:\"name\""
	Color    string  "json:\"color\" graphql:\"color\""
	Position float64 "json:\"position\" graphql:\"position\""
}

func (t *UnassignIssue_IssueUpdate_Issue_State) GetName() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_State{}
	}
	return t.Name
}
func (t *UnassignIssue_IssueUpdate_Issue_State) GetColor() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_State{}
	}
	return t.Color
}
func (t *UnassignIssue_IssueUpdate_Issue_State) GetPosition() float64 {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_State{}
	}
	return t.Position
}

type UnassignIssue_IssueUpdate_Issue_Labels_Nodes struct {
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *UnassignIssue_IssueUpdate_Issue_Labels_Nodes) GetName() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Labels_Nodes{}
	}
	return t.Name
}
func (t *UnassignIssue_IssueUpdate_Issue_Labels_Nodes) GetColor() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Labels_Nodes{}
	}
	return t.Color
}

type UnassignIssue_IssueUpdate_Issue_Labels struct {
	Nodes []*UnassignIssue_IssueUpdate_Issue_Labels_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *UnassignIssue_IssueUpdate_Issue_Labels) GetNodes() []*UnassignIssue_IssueUpdate_Issue_Labels_Nodes {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue_Labels{}
	}
	return t.Nodes
}

type UnassignIssue_IssueUpdate_Issue struct {
	ID         string                                    "json:\"id\" graphql:\"id\""
	Identifier string                                    "json:\"identifier\" graphql:\"identifier\""
	Title      string                                    "json:\"title\" graphql:\"title\""
	Priority   float64                                   "json:\"priority\" graphql:\"priority\""
	Team       UnassignIssue_IssueUpdate_Issue_Team      "json:\"team\" graphql:\"team\""
	Assignee   *UnassignIssue_IssueUpdate_Issue_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Project    *UnassignIssue_IssueUpdate_Issue_Project  "json:\"project,omitempty\" graphql:\"project\""
	State      UnassignIssue_IssueUpdate_Issue_State     "json:\"state\" graphql:\"state\""
	Labels     UnassignIssue_IssueUpdate_Issue_Labels    "json:\"labels\" graphql:\"labels\""
}

func (t *UnassignIssue_IssueUpdate_Issue) GetID() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return t.ID
}
func (t *UnassignIssue_IssueUpdate_Issue) GetIdentifier() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return t.Identifier
}
func (t *UnassignIssue_IssueUpdate_Issue) GetTitle() string {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return t.Title
}
func (t *UnassignIssue_IssueUpdate_Issue) GetPriority() float64 {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return t.Priority
}
func (t *UnassignIssue_IssueUpdate_Issue) GetTeam() *UnassignIssue_IssueUpdate_Issue_Team {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return &t.Team
}
func (t *UnassignIssue_IssueUpdate_Issue) GetAssignee() *UnassignIssue_IssueUpdate_Issue_Assignee {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return t.Assignee
}
func (t *UnassignIssue_IssueUpdate_Issue) GetProject() *UnassignIssue_IssueUpdate_Issue_Project {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return t.Project
}
func (t *UnassignIssue_IssueUpdate_Issue) GetState() *UnassignIssue_IssueUpdate_Issue_State {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return &t.State
}
func (t *UnassignIssue_IssueUpdate_Issue) GetLabels() *UnassignIssue_IssueUpdate_Issue_Labels {
	if t == nil {
		t = &UnassignIssue_IssueUpdate_Issue{}
	}
	return &t.Labels
}

type UnassignIssue_IssueUpdate struct {
	Success bool                             "json:\"success\" graphql:\"success\""
	Issue   *UnassignIssue_IssueUpdate_Issue "json:\"issue,omitempty\" graphql:\"issue\""
}

func (t *UnassignIssue_IssueUpdate) GetSuccess() bool {
	if t == nil {
		t = &UnassignIssue_IssueUpdate{}
	}
	return t.Success
}
func (t *UnassignIssue_IssueUpdate) GetIssue() *UnassignIssue_IssueUpdate_Issue {
	if t == nil {
		t = &UnassignIssue_IssueUpdate{}
	}
	return t.Issue
}

type GetProjects_Projects_Nodes_Lead struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetProjects_Projects_Nodes_Lead) GetDisplayName() string {
	if t == nil {
		t = &GetProjects_Projects_Nodes_Lead{}
	}
	return t.DisplayName
}

type GetProjects_Projects_Nodes struct {
	Lead     *GetProjects_Projects_Nodes_Lead "json:\"lead,omitempty\" graphql:\"lead\""
	Progress float64                          "json:\"progress\" graphql:\"progress\""
	Name     string                           "json:\"name\" graphql:\"name\""
	ID       string                           "json:\"id\" graphql:\"id\""
	Color    string                           "json:\"color\" graphql:\"color\""
}

func (t *GetProjects_Projects_Nodes) GetLead() *GetProjects_Projects_Nodes_Lead {
	if t == nil {
		t = &GetProjects_Projects_Nodes{}
	}
	return t.Lead
}
func (t *GetProjects_Projects_Nodes) GetProgress() float64 {
	if t == nil {
		t = &GetProjects_Projects_Nodes{}
	}
	return t.Progress
}
func (t *GetProjects_Projects_Nodes) GetName() string {
	if t == nil {
		t = &GetProjects_Projects_Nodes{}
	}
	return t.Name
}
func (t *GetProjects_Projects_Nodes) GetID() string {
	if t == nil {
		t = &GetProjects_Projects_Nodes{}
	}
	return t.ID
}
func (t *GetProjects_Projects_Nodes) GetColor() string {
	if t == nil {
		t = &GetProjects_Projects_Nodes{}
	}
	return t.Color
}

type GetProjects_Projects_PageInfo struct {
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
}

func (t *GetProjects_Projects_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetProjects_Projects_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetProjects_Projects_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetProjects_Projects_PageInfo{}
	}
	return t.HasNextPage
}

type GetProjects_Projects struct {
	Nodes    []*GetProjects_Projects_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetProjects_Projects_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetProjects_Projects) GetNodes() []*GetProjects_Projects_Nodes {
	if t == nil {
		t = &GetProjects_Projects{}
	}
	return t.Nodes
}
func (t *GetProjects_Projects) GetPageInfo() *GetProjects_Projects_PageInfo {
	if t == nil {
		t = &GetProjects_Projects{}
	}
	return &t.PageInfo
}

type GetCurrentUser_Viewer struct {
	ID          string "json:\"id\" graphql:\"id\""
	Email       string "json:\"email\" graphql:\"email\""
	IsMe        bool   "json:\"isMe\" graphql:\"isMe\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetCurrentUser_Viewer) GetID() string {
	if t == nil {
		t = &GetCurrentUser_Viewer{}
	}
	return t.ID
}
func (t *GetCurrentUser_Viewer) GetEmail() string {
	if t == nil {
		t = &GetCurrentUser_Viewer{}
	}
	return t.Email
}
func (t *GetCurrentUser_Viewer) GetIsMe() bool {
	if t == nil {
		t = &GetCurrentUser_Viewer{}
	}
	return t.IsMe
}
func (t *GetCurrentUser_Viewer) GetDisplayName() string {
	if t == nil {
		t = &GetCurrentUser_Viewer{}
	}
	return t.DisplayName
}

type GetAllUsers_Users_Nodes struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	IsMe        bool   "json:\"isMe\" graphql:\"isMe\""
}

func (t *GetAllUsers_Users_Nodes) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Nodes{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Nodes) GetDisplayName() string {
	if t == nil {
		t = &GetAllUsers_Users_Nodes{}
	}
	return t.DisplayName
}
func (t *GetAllUsers_Users_Nodes) GetIsMe() bool {
	if t == nil {
		t = &GetAllUsers_Users_Nodes{}
	}
	return t.IsMe
}

type GetAllUsers_Users_PageInfo struct {
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
}

func (t *GetAllUsers_Users_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllUsers_Users_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllUsers_Users_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllUsers_Users_PageInfo{}
	}
	return t.EndCursor
}

type GetAllUsers_Users struct {
	Nodes    []*GetAllUsers_Users_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetAllUsers_Users_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetAllUsers_Users) GetNodes() []*GetAllUsers_Users_Nodes {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return t.Nodes
}
func (t *GetAllUsers_Users) GetPageInfo() *GetAllUsers_Users_PageInfo {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return &t.PageInfo
}

type GetIssues struct {
	Issues GetIssues_Issues "json:\"issues\" graphql:\"issues\""
}

func (t *GetIssues) GetIssues() *GetIssues_Issues {
	if t == nil {
		t = &GetIssues{}
	}
	return &t.Issues
}

type SearchIssues struct {
	SearchIssues SearchIssues_SearchIssues "json:\"searchIssues\" graphql:\"searchIssues\""
}

func (t *SearchIssues) GetSearchIssues() *SearchIssues_SearchIssues {
	if t == nil {
		t = &SearchIssues{}
	}
	return &t.SearchIssues
}

type UpdateIssue struct {
	IssueUpdate UpdateIssue_IssueUpdate "json:\"issueUpdate\" graphql:\"issueUpdate\""
}

func (t *UpdateIssue) GetIssueUpdate() *UpdateIssue_IssueUpdate {
	if t == nil {
		t = &UpdateIssue{}
	}
	return &t.IssueUpdate
}

type UnassignIssue struct {
	IssueUpdate UnassignIssue_IssueUpdate "json:\"issueUpdate\" graphql:\"issueUpdate\""
}

func (t *UnassignIssue) GetIssueUpdate() *UnassignIssue_IssueUpdate {
	if t == nil {
		t = &UnassignIssue{}
	}
	return &t.IssueUpdate
}

type GetProjects struct {
	Projects GetProjects_Projects "json:\"projects\" graphql:\"projects\""
}

func (t *GetProjects) GetProjects() *GetProjects_Projects {
	if t == nil {
		t = &GetProjects{}
	}
	return &t.Projects
}

type GetCurrentUser struct {
	Viewer GetCurrentUser_Viewer "json:\"viewer\" graphql:\"viewer\""
}

func (t *GetCurrentUser) GetViewer() *GetCurrentUser_Viewer {
	if t == nil {
		t = &GetCurrentUser{}
	}
	return &t.Viewer
}

type GetAllUsers struct {
	Users GetAllUsers_Users "json:\"users\" graphql:\"users\""
}

func (t *GetAllUsers) GetUsers() *GetAllUsers_Users {
	if t == nil {
		t = &GetAllUsers{}
	}
	return &t.Users
}

const GetIssuesDocument = `query GetIssues ($filter: IssueFilter, $after: String, $first: Int = 50) {
	issues(filter: $filter, after: $after, first: $first) {
		nodes {
			id
			identifier
			title
			priority
			team {
				name
				color
			}
			assignee {
				displayName
				isMe
			}
			project {
				name
				color
			}
			state {
				name
				color
				position
			}
			labels {
				nodes {
					name
					color
				}
			}
		}
		pageInfo {
			hasNextPage
			endCursor
		}
	}
}
`

func (c *Client) GetIssues(ctx context.Context, filter *models.IssueFilter, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetIssues, error) {
	vars := map[string]interface{}{
		"filter": filter,
		"after":  after,
		"first":  first,
	}

	var res GetIssues
	if err := c.Client.Post(ctx, "GetIssues", GetIssuesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SearchIssuesDocument = `query SearchIssues ($term: String!, $after: String, $first: Int = 50) {
	searchIssues(term: $term, after: $after, first: $first) {
		totalCount
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			id
			identifier
			title
			priority
			team {
				name
				color
			}
			assignee {
				displayName
				isMe
			}
			project {
				name
				color
			}
			state {
				name
				color
				position
			}
			labels {
				nodes {
					name
					color
				}
			}
		}
	}
}
`

func (c *Client) SearchIssues(ctx context.Context, term string, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*SearchIssues, error) {
	vars := map[string]interface{}{
		"term":  term,
		"after": after,
		"first": first,
	}

	var res SearchIssues
	if err := c.Client.Post(ctx, "SearchIssues", SearchIssuesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateIssueDocument = `mutation UpdateIssue ($input: IssueUpdateInput!, $issueUpdateId: String!) {
	issueUpdate(input: $input, id: $issueUpdateId) {
		success
		issue {
			id
			identifier
			title
			priority
			team {
				name
				color
			}
			assignee {
				displayName
				isMe
			}
			project {
				name
				color
			}
			state {
				name
				color
				position
			}
			labels {
				nodes {
					name
					color
				}
			}
		}
	}
}
`

func (c *Client) UpdateIssue(ctx context.Context, input models.IssueUpdateInput, issueUpdateID string, interceptors ...clientv2.RequestInterceptor) (*UpdateIssue, error) {
	vars := map[string]interface{}{
		"input":         input,
		"issueUpdateId": issueUpdateID,
	}

	var res UpdateIssue
	if err := c.Client.Post(ctx, "UpdateIssue", UpdateIssueDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UnassignIssueDocument = `mutation UnassignIssue ($issueUpdateId: String!) {
	issueUpdate(input: {assigneeId:null}, id: $issueUpdateId) {
		success
		issue {
			id
			identifier
			title
			priority
			team {
				name
				color
			}
			assignee {
				displayName
				isMe
			}
			project {
				name
				color
			}
			state {
				name
				color
				position
			}
			labels {
				nodes {
					name
					color
				}
			}
		}
	}
}
`

func (c *Client) UnassignIssue(ctx context.Context, issueUpdateID string, interceptors ...clientv2.RequestInterceptor) (*UnassignIssue, error) {
	vars := map[string]interface{}{
		"issueUpdateId": issueUpdateID,
	}

	var res UnassignIssue
	if err := c.Client.Post(ctx, "UnassignIssue", UnassignIssueDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProjectsDocument = `query GetProjects ($after: String, $first: Int = 50) {
	projects(after: $after, first: $first) {
		nodes {
			lead {
				displayName
			}
			progress
			name
			id
			color
		}
		pageInfo {
			endCursor
			hasNextPage
		}
	}
}
`

func (c *Client) GetProjects(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetProjects, error) {
	vars := map[string]interface{}{
		"after": after,
		"first": first,
	}

	var res GetProjects
	if err := c.Client.Post(ctx, "GetProjects", GetProjectsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetCurrentUserDocument = `query GetCurrentUser {
	viewer {
		id
		email
		isMe
		displayName
	}
}
`

func (c *Client) GetCurrentUser(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetCurrentUser, error) {
	vars := map[string]interface{}{}

	var res GetCurrentUser
	if err := c.Client.Post(ctx, "GetCurrentUser", GetCurrentUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUsersDocument = `query GetAllUsers ($after: String, $first: Int = 50) {
	users(after: $after, first: $first) {
		nodes {
			id
			displayName
			isMe
		}
		pageInfo {
			hasNextPage
			endCursor
		}
	}
}
`

func (c *Client) GetAllUsers(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error) {
	vars := map[string]interface{}{
		"after": after,
		"first": first,
	}

	var res GetAllUsers
	if err := c.Client.Post(ctx, "GetAllUsers", GetAllUsersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetIssuesDocument:      "GetIssues",
	SearchIssuesDocument:   "SearchIssues",
	UpdateIssueDocument:    "UpdateIssue",
	UnassignIssueDocument:  "UnassignIssue",
	GetProjectsDocument:    "GetProjects",
	GetCurrentUserDocument: "GetCurrentUser",
	GetAllUsersDocument:    "GetAllUsers",
}
