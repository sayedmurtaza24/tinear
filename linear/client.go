// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package linearClient

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/sayedmurtaza24/tinear/linear/models"
)

type LinearClient interface {
	GetIssues(ctx context.Context, filter *models.IssueFilter, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetIssues, error)
	BatchUpdateIssues(ctx context.Context, input models.IssueUpdateInput, ids []string, interceptors ...clientv2.RequestInterceptor) (*BatchUpdateIssues, error)
	GetLabels(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetLabels, error)
	GetOrg(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetOrg, error)
	GetProjects(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetProjects, error)
	GetStates(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetStates, error)
	GetTeams(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetTeams, error)
	GetAllUsers(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) LinearClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type GetIssues_Issues_Nodes_Team struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Color *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *GetIssues_Issues_Nodes_Team) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Team{}
	}
	return t.ID
}
func (t *GetIssues_Issues_Nodes_Team) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Team{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_Team) GetColor() *string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Team{}
	}
	return t.Color
}

type GetIssues_Issues_Nodes_Assignee struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	Email       string "json:\"email\" graphql:\"email\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	IsMe        bool   "json:\"isMe\" graphql:\"isMe\""
}

func (t *GetIssues_Issues_Nodes_Assignee) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Assignee{}
	}
	return t.ID
}
func (t *GetIssues_Issues_Nodes_Assignee) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Assignee{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_Assignee) GetEmail() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Assignee{}
	}
	return t.Email
}
func (t *GetIssues_Issues_Nodes_Assignee) GetDisplayName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Assignee{}
	}
	return t.DisplayName
}
func (t *GetIssues_Issues_Nodes_Assignee) GetIsMe() bool {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Assignee{}
	}
	return t.IsMe
}

type GetIssues_Issues_Nodes_Project struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *GetIssues_Issues_Nodes_Project) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Project{}
	}
	return t.ID
}
func (t *GetIssues_Issues_Nodes_Project) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Project{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_Project) GetColor() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Project{}
	}
	return t.Color
}

type GetIssues_Issues_Nodes_State_Team struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIssues_Issues_Nodes_State_Team) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State_Team{}
	}
	return t.ID
}

type GetIssues_Issues_Nodes_State struct {
	ID       string                            "json:\"id\" graphql:\"id\""
	Name     string                            "json:\"name\" graphql:\"name\""
	Color    string                            "json:\"color\" graphql:\"color\""
	Position float64                           "json:\"position\" graphql:\"position\""
	Team     GetIssues_Issues_Nodes_State_Team "json:\"team\" graphql:\"team\""
}

func (t *GetIssues_Issues_Nodes_State) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State{}
	}
	return t.ID
}
func (t *GetIssues_Issues_Nodes_State) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_State) GetColor() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State{}
	}
	return t.Color
}
func (t *GetIssues_Issues_Nodes_State) GetPosition() float64 {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State{}
	}
	return t.Position
}
func (t *GetIssues_Issues_Nodes_State) GetTeam() *GetIssues_Issues_Nodes_State_Team {
	if t == nil {
		t = &GetIssues_Issues_Nodes_State{}
	}
	return &t.Team
}

type GetIssues_Issues_Nodes_Labels_Nodes_Team struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIssues_Issues_Nodes_Labels_Nodes_Team) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels_Nodes_Team{}
	}
	return t.ID
}

type GetIssues_Issues_Nodes_Labels_Nodes struct {
	ID    string                                    "json:\"id\" graphql:\"id\""
	Name  string                                    "json:\"name\" graphql:\"name\""
	Color string                                    "json:\"color\" graphql:\"color\""
	Team  *GetIssues_Issues_Nodes_Labels_Nodes_Team "json:\"team,omitempty\" graphql:\"team\""
}

func (t *GetIssues_Issues_Nodes_Labels_Nodes) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels_Nodes{}
	}
	return t.ID
}
func (t *GetIssues_Issues_Nodes_Labels_Nodes) GetName() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels_Nodes{}
	}
	return t.Name
}
func (t *GetIssues_Issues_Nodes_Labels_Nodes) GetColor() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels_Nodes{}
	}
	return t.Color
}
func (t *GetIssues_Issues_Nodes_Labels_Nodes) GetTeam() *GetIssues_Issues_Nodes_Labels_Nodes_Team {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels_Nodes{}
	}
	return t.Team
}

type GetIssues_Issues_Nodes_Labels struct {
	Nodes []*GetIssues_Issues_Nodes_Labels_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *GetIssues_Issues_Nodes_Labels) GetNodes() []*GetIssues_Issues_Nodes_Labels_Nodes {
	if t == nil {
		t = &GetIssues_Issues_Nodes_Labels{}
	}
	return t.Nodes
}

type GetIssues_Issues_Nodes struct {
	ID          string                           "json:\"id\" graphql:\"id\""
	Identifier  string                           "json:\"identifier\" graphql:\"identifier\""
	Title       string                           "json:\"title\" graphql:\"title\""
	Priority    float64                          "json:\"priority\" graphql:\"priority\""
	Description *string                          "json:\"description,omitempty\" graphql:\"description\""
	Team        GetIssues_Issues_Nodes_Team      "json:\"team\" graphql:\"team\""
	Assignee    *GetIssues_Issues_Nodes_Assignee "json:\"assignee,omitempty\" graphql:\"assignee\""
	Project     *GetIssues_Issues_Nodes_Project  "json:\"project,omitempty\" graphql:\"project\""
	State       GetIssues_Issues_Nodes_State     "json:\"state\" graphql:\"state\""
	Labels      GetIssues_Issues_Nodes_Labels    "json:\"labels\" graphql:\"labels\""
	CreatedAt   string                           "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt   string                           "json:\"updatedAt\" graphql:\"updatedAt\""
	CanceledAt  *string                          "json:\"canceledAt,omitempty\" graphql:\"canceledAt\""
}

func (t *GetIssues_Issues_Nodes) GetID() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.ID
}
func (t *GetIssues_Issues_Nodes) GetIdentifier() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Identifier
}
func (t *GetIssues_Issues_Nodes) GetTitle() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Title
}
func (t *GetIssues_Issues_Nodes) GetPriority() float64 {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Priority
}
func (t *GetIssues_Issues_Nodes) GetDescription() *string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Description
}
func (t *GetIssues_Issues_Nodes) GetTeam() *GetIssues_Issues_Nodes_Team {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return &t.Team
}
func (t *GetIssues_Issues_Nodes) GetAssignee() *GetIssues_Issues_Nodes_Assignee {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Assignee
}
func (t *GetIssues_Issues_Nodes) GetProject() *GetIssues_Issues_Nodes_Project {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.Project
}
func (t *GetIssues_Issues_Nodes) GetState() *GetIssues_Issues_Nodes_State {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return &t.State
}
func (t *GetIssues_Issues_Nodes) GetLabels() *GetIssues_Issues_Nodes_Labels {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return &t.Labels
}
func (t *GetIssues_Issues_Nodes) GetCreatedAt() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.CreatedAt
}
func (t *GetIssues_Issues_Nodes) GetUpdatedAt() string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.UpdatedAt
}
func (t *GetIssues_Issues_Nodes) GetCanceledAt() *string {
	if t == nil {
		t = &GetIssues_Issues_Nodes{}
	}
	return t.CanceledAt
}

type GetIssues_Issues_PageInfo struct {
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
}

func (t *GetIssues_Issues_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetIssues_Issues_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetIssues_Issues_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetIssues_Issues_PageInfo{}
	}
	return t.EndCursor
}

type GetIssues_Issues struct {
	Nodes    []*GetIssues_Issues_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetIssues_Issues_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetIssues_Issues) GetNodes() []*GetIssues_Issues_Nodes {
	if t == nil {
		t = &GetIssues_Issues{}
	}
	return t.Nodes
}
func (t *GetIssues_Issues) GetPageInfo() *GetIssues_Issues_PageInfo {
	if t == nil {
		t = &GetIssues_Issues{}
	}
	return &t.PageInfo
}

type BatchUpdateIssues_IssueBatchUpdate struct {
	Success bool "json:\"success\" graphql:\"success\""
}

func (t *BatchUpdateIssues_IssueBatchUpdate) GetSuccess() bool {
	if t == nil {
		t = &BatchUpdateIssues_IssueBatchUpdate{}
	}
	return t.Success
}

type GetLabels_IssueLabels_Nodes_Team struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetLabels_IssueLabels_Nodes_Team) GetID() string {
	if t == nil {
		t = &GetLabels_IssueLabels_Nodes_Team{}
	}
	return t.ID
}

type GetLabels_IssueLabels_Nodes struct {
	ID    string                            "json:\"id\" graphql:\"id\""
	Color string                            "json:\"color\" graphql:\"color\""
	Name  string                            "json:\"name\" graphql:\"name\""
	Team  *GetLabels_IssueLabels_Nodes_Team "json:\"team,omitempty\" graphql:\"team\""
}

func (t *GetLabels_IssueLabels_Nodes) GetID() string {
	if t == nil {
		t = &GetLabels_IssueLabels_Nodes{}
	}
	return t.ID
}
func (t *GetLabels_IssueLabels_Nodes) GetColor() string {
	if t == nil {
		t = &GetLabels_IssueLabels_Nodes{}
	}
	return t.Color
}
func (t *GetLabels_IssueLabels_Nodes) GetName() string {
	if t == nil {
		t = &GetLabels_IssueLabels_Nodes{}
	}
	return t.Name
}
func (t *GetLabels_IssueLabels_Nodes) GetTeam() *GetLabels_IssueLabels_Nodes_Team {
	if t == nil {
		t = &GetLabels_IssueLabels_Nodes{}
	}
	return t.Team
}

type GetLabels_IssueLabels_PageInfo struct {
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
}

func (t *GetLabels_IssueLabels_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetLabels_IssueLabels_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetLabels_IssueLabels_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetLabels_IssueLabels_PageInfo{}
	}
	return t.HasNextPage
}

type GetLabels_IssueLabels struct {
	Nodes    []*GetLabels_IssueLabels_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetLabels_IssueLabels_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetLabels_IssueLabels) GetNodes() []*GetLabels_IssueLabels_Nodes {
	if t == nil {
		t = &GetLabels_IssueLabels{}
	}
	return t.Nodes
}
func (t *GetLabels_IssueLabels) GetPageInfo() *GetLabels_IssueLabels_PageInfo {
	if t == nil {
		t = &GetLabels_IssueLabels{}
	}
	return &t.PageInfo
}

type GetOrg_Organization struct {
	ID     string "json:\"id\" graphql:\"id\""
	Name   string "json:\"name\" graphql:\"name\""
	URLKey string "json:\"urlKey\" graphql:\"urlKey\""
}

func (t *GetOrg_Organization) GetID() string {
	if t == nil {
		t = &GetOrg_Organization{}
	}
	return t.ID
}
func (t *GetOrg_Organization) GetName() string {
	if t == nil {
		t = &GetOrg_Organization{}
	}
	return t.Name
}
func (t *GetOrg_Organization) GetURLKey() string {
	if t == nil {
		t = &GetOrg_Organization{}
	}
	return t.URLKey
}

type GetProjects_Projects_Nodes struct {
	Name  string "json:\"name\" graphql:\"name\""
	ID    string "json:\"id\" graphql:\"id\""
	Color string "json:\"color\" graphql:\"color\""
}

func (t *GetProjects_Projects_Nodes) GetName() string {
	if t == nil {
		t = &GetProjects_Projects_Nodes{}
	}
	return t.Name
}
func (t *GetProjects_Projects_Nodes) GetID() string {
	if t == nil {
		t = &GetProjects_Projects_Nodes{}
	}
	return t.ID
}
func (t *GetProjects_Projects_Nodes) GetColor() string {
	if t == nil {
		t = &GetProjects_Projects_Nodes{}
	}
	return t.Color
}

type GetProjects_Projects_PageInfo struct {
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
}

func (t *GetProjects_Projects_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetProjects_Projects_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetProjects_Projects_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetProjects_Projects_PageInfo{}
	}
	return t.HasNextPage
}

type GetProjects_Projects struct {
	Nodes    []*GetProjects_Projects_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetProjects_Projects_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetProjects_Projects) GetNodes() []*GetProjects_Projects_Nodes {
	if t == nil {
		t = &GetProjects_Projects{}
	}
	return t.Nodes
}
func (t *GetProjects_Projects) GetPageInfo() *GetProjects_Projects_PageInfo {
	if t == nil {
		t = &GetProjects_Projects{}
	}
	return &t.PageInfo
}

type GetStates_WorkflowStates_Nodes_Team struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetStates_WorkflowStates_Nodes_Team) GetID() string {
	if t == nil {
		t = &GetStates_WorkflowStates_Nodes_Team{}
	}
	return t.ID
}

type GetStates_WorkflowStates_Nodes struct {
	Color string                              "json:\"color\" graphql:\"color\""
	ID    string                              "json:\"id\" graphql:\"id\""
	Name  string                              "json:\"name\" graphql:\"name\""
	Team  GetStates_WorkflowStates_Nodes_Team "json:\"team\" graphql:\"team\""
}

func (t *GetStates_WorkflowStates_Nodes) GetColor() string {
	if t == nil {
		t = &GetStates_WorkflowStates_Nodes{}
	}
	return t.Color
}
func (t *GetStates_WorkflowStates_Nodes) GetID() string {
	if t == nil {
		t = &GetStates_WorkflowStates_Nodes{}
	}
	return t.ID
}
func (t *GetStates_WorkflowStates_Nodes) GetName() string {
	if t == nil {
		t = &GetStates_WorkflowStates_Nodes{}
	}
	return t.Name
}
func (t *GetStates_WorkflowStates_Nodes) GetTeam() *GetStates_WorkflowStates_Nodes_Team {
	if t == nil {
		t = &GetStates_WorkflowStates_Nodes{}
	}
	return &t.Team
}

type GetStates_WorkflowStates_PageInfo struct {
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
}

func (t *GetStates_WorkflowStates_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetStates_WorkflowStates_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetStates_WorkflowStates_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetStates_WorkflowStates_PageInfo{}
	}
	return t.HasNextPage
}

type GetStates_WorkflowStates struct {
	Nodes    []*GetStates_WorkflowStates_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetStates_WorkflowStates_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetStates_WorkflowStates) GetNodes() []*GetStates_WorkflowStates_Nodes {
	if t == nil {
		t = &GetStates_WorkflowStates{}
	}
	return t.Nodes
}
func (t *GetStates_WorkflowStates) GetPageInfo() *GetStates_WorkflowStates_PageInfo {
	if t == nil {
		t = &GetStates_WorkflowStates{}
	}
	return &t.PageInfo
}

type GetTeams_Teams_Nodes struct {
	Name  string  "json:\"name\" graphql:\"name\""
	ID    string  "json:\"id\" graphql:\"id\""
	Color *string "json:\"color,omitempty\" graphql:\"color\""
}

func (t *GetTeams_Teams_Nodes) GetName() string {
	if t == nil {
		t = &GetTeams_Teams_Nodes{}
	}
	return t.Name
}
func (t *GetTeams_Teams_Nodes) GetID() string {
	if t == nil {
		t = &GetTeams_Teams_Nodes{}
	}
	return t.ID
}
func (t *GetTeams_Teams_Nodes) GetColor() *string {
	if t == nil {
		t = &GetTeams_Teams_Nodes{}
	}
	return t.Color
}

type GetTeams_Teams_PageInfo struct {
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
}

func (t *GetTeams_Teams_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetTeams_Teams_PageInfo{}
	}
	return t.EndCursor
}
func (t *GetTeams_Teams_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetTeams_Teams_PageInfo{}
	}
	return t.HasNextPage
}

type GetTeams_Teams struct {
	Nodes    []*GetTeams_Teams_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetTeams_Teams_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetTeams_Teams) GetNodes() []*GetTeams_Teams_Nodes {
	if t == nil {
		t = &GetTeams_Teams{}
	}
	return t.Nodes
}
func (t *GetTeams_Teams) GetPageInfo() *GetTeams_Teams_PageInfo {
	if t == nil {
		t = &GetTeams_Teams{}
	}
	return &t.PageInfo
}

type GetAllUsers_Users_Nodes struct {
	ID          string "json:\"id\" graphql:\"id\""
	Email       string "json:\"email\" graphql:\"email\""
	Name        string "json:\"name\" graphql:\"name\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	IsMe        bool   "json:\"isMe\" graphql:\"isMe\""
}

func (t *GetAllUsers_Users_Nodes) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Nodes{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Nodes) GetEmail() string {
	if t == nil {
		t = &GetAllUsers_Users_Nodes{}
	}
	return t.Email
}
func (t *GetAllUsers_Users_Nodes) GetName() string {
	if t == nil {
		t = &GetAllUsers_Users_Nodes{}
	}
	return t.Name
}
func (t *GetAllUsers_Users_Nodes) GetDisplayName() string {
	if t == nil {
		t = &GetAllUsers_Users_Nodes{}
	}
	return t.DisplayName
}
func (t *GetAllUsers_Users_Nodes) GetIsMe() bool {
	if t == nil {
		t = &GetAllUsers_Users_Nodes{}
	}
	return t.IsMe
}

type GetAllUsers_Users_PageInfo struct {
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
}

func (t *GetAllUsers_Users_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &GetAllUsers_Users_PageInfo{}
	}
	return t.HasNextPage
}
func (t *GetAllUsers_Users_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &GetAllUsers_Users_PageInfo{}
	}
	return t.EndCursor
}

type GetAllUsers_Users struct {
	Nodes    []*GetAllUsers_Users_Nodes "json:\"nodes\" graphql:\"nodes\""
	PageInfo GetAllUsers_Users_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *GetAllUsers_Users) GetNodes() []*GetAllUsers_Users_Nodes {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return t.Nodes
}
func (t *GetAllUsers_Users) GetPageInfo() *GetAllUsers_Users_PageInfo {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return &t.PageInfo
}

type GetIssues struct {
	Issues GetIssues_Issues "json:\"issues\" graphql:\"issues\""
}

func (t *GetIssues) GetIssues() *GetIssues_Issues {
	if t == nil {
		t = &GetIssues{}
	}
	return &t.Issues
}

type BatchUpdateIssues struct {
	IssueBatchUpdate BatchUpdateIssues_IssueBatchUpdate "json:\"issueBatchUpdate\" graphql:\"issueBatchUpdate\""
}

func (t *BatchUpdateIssues) GetIssueBatchUpdate() *BatchUpdateIssues_IssueBatchUpdate {
	if t == nil {
		t = &BatchUpdateIssues{}
	}
	return &t.IssueBatchUpdate
}

type GetLabels struct {
	IssueLabels GetLabels_IssueLabels "json:\"issueLabels\" graphql:\"issueLabels\""
}

func (t *GetLabels) GetIssueLabels() *GetLabels_IssueLabels {
	if t == nil {
		t = &GetLabels{}
	}
	return &t.IssueLabels
}

type GetOrg struct {
	Organization GetOrg_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *GetOrg) GetOrganization() *GetOrg_Organization {
	if t == nil {
		t = &GetOrg{}
	}
	return &t.Organization
}

type GetProjects struct {
	Projects GetProjects_Projects "json:\"projects\" graphql:\"projects\""
}

func (t *GetProjects) GetProjects() *GetProjects_Projects {
	if t == nil {
		t = &GetProjects{}
	}
	return &t.Projects
}

type GetStates struct {
	WorkflowStates GetStates_WorkflowStates "json:\"workflowStates\" graphql:\"workflowStates\""
}

func (t *GetStates) GetWorkflowStates() *GetStates_WorkflowStates {
	if t == nil {
		t = &GetStates{}
	}
	return &t.WorkflowStates
}

type GetTeams struct {
	Teams GetTeams_Teams "json:\"teams\" graphql:\"teams\""
}

func (t *GetTeams) GetTeams() *GetTeams_Teams {
	if t == nil {
		t = &GetTeams{}
	}
	return &t.Teams
}

type GetAllUsers struct {
	Users GetAllUsers_Users "json:\"users\" graphql:\"users\""
}

func (t *GetAllUsers) GetUsers() *GetAllUsers_Users {
	if t == nil {
		t = &GetAllUsers{}
	}
	return &t.Users
}

const GetIssuesDocument = `query GetIssues ($filter: IssueFilter, $after: String, $first: Int = 50) {
	issues(filter: $filter, after: $after, first: $first) {
		nodes {
			id
			identifier
			title
			priority
			description
			team {
				id
				name
				color
			}
			assignee {
				id
				name
				email
				displayName
				isMe
			}
			project {
				id
				name
				color
			}
			state {
				id
				name
				color
				position
				team {
					id
				}
			}
			labels {
				nodes {
					id
					name
					color
					team {
						id
					}
				}
			}
			createdAt
			updatedAt
			canceledAt
		}
		pageInfo {
			hasNextPage
			endCursor
		}
	}
}
`

func (c *Client) GetIssues(ctx context.Context, filter *models.IssueFilter, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetIssues, error) {
	vars := map[string]any{
		"filter": filter,
		"after":  after,
		"first":  first,
	}

	var res GetIssues
	if err := c.Client.Post(ctx, "GetIssues", GetIssuesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BatchUpdateIssuesDocument = `mutation BatchUpdateIssues ($input: IssueUpdateInput!, $ids: [UUID!]!) {
	issueBatchUpdate(input: $input, ids: $ids) {
		success
	}
}
`

func (c *Client) BatchUpdateIssues(ctx context.Context, input models.IssueUpdateInput, ids []string, interceptors ...clientv2.RequestInterceptor) (*BatchUpdateIssues, error) {
	vars := map[string]any{
		"input": input,
		"ids":   ids,
	}

	var res BatchUpdateIssues
	if err := c.Client.Post(ctx, "BatchUpdateIssues", BatchUpdateIssuesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetLabelsDocument = `query GetLabels ($after: String, $first: Int = 50) {
	issueLabels(after: $after, first: $first) {
		nodes {
			id
			color
			name
			team {
				id
			}
		}
		pageInfo {
			endCursor
			hasNextPage
		}
	}
}
`

func (c *Client) GetLabels(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetLabels, error) {
	vars := map[string]any{
		"after": after,
		"first": first,
	}

	var res GetLabels
	if err := c.Client.Post(ctx, "GetLabels", GetLabelsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgDocument = `query GetOrg {
	organization {
		id
		name
		urlKey
	}
}
`

func (c *Client) GetOrg(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetOrg, error) {
	vars := map[string]any{}

	var res GetOrg
	if err := c.Client.Post(ctx, "GetOrg", GetOrgDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProjectsDocument = `query GetProjects ($after: String, $first: Int = 50) {
	projects(after: $after, first: $first) {
		nodes {
			name
			id
			color
		}
		pageInfo {
			endCursor
			hasNextPage
		}
	}
}
`

func (c *Client) GetProjects(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetProjects, error) {
	vars := map[string]any{
		"after": after,
		"first": first,
	}

	var res GetProjects
	if err := c.Client.Post(ctx, "GetProjects", GetProjectsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStatesDocument = `query GetStates ($after: String, $first: Int = 50) {
	workflowStates(after: $after, first: $first) {
		nodes {
			color
			id
			name
			team {
				id
			}
		}
		pageInfo {
			endCursor
			hasNextPage
		}
	}
}
`

func (c *Client) GetStates(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetStates, error) {
	vars := map[string]any{
		"after": after,
		"first": first,
	}

	var res GetStates
	if err := c.Client.Post(ctx, "GetStates", GetStatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTeamsDocument = `query GetTeams ($after: String, $first: Int = 50) {
	teams(after: $after, first: $first) {
		nodes {
			name
			id
			color
		}
		pageInfo {
			endCursor
			hasNextPage
		}
	}
}
`

func (c *Client) GetTeams(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetTeams, error) {
	vars := map[string]any{
		"after": after,
		"first": first,
	}

	var res GetTeams
	if err := c.Client.Post(ctx, "GetTeams", GetTeamsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUsersDocument = `query GetAllUsers ($after: String, $first: Int = 50) {
	users(after: $after, first: $first) {
		nodes {
			id
			email
			name
			displayName
			isMe
		}
		pageInfo {
			hasNextPage
			endCursor
		}
	}
}
`

func (c *Client) GetAllUsers(ctx context.Context, after *string, first *int64, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error) {
	vars := map[string]any{
		"after": after,
		"first": first,
	}

	var res GetAllUsers
	if err := c.Client.Post(ctx, "GetAllUsers", GetAllUsersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetIssuesDocument:         "GetIssues",
	BatchUpdateIssuesDocument: "BatchUpdateIssues",
	GetLabelsDocument:         "GetLabels",
	GetOrgDocument:            "GetOrg",
	GetProjectsDocument:       "GetProjects",
	GetStatesDocument:         "GetStates",
	GetTeamsDocument:          "GetTeams",
	GetAllUsersDocument:       "GetAllUsers",
}
